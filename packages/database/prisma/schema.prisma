datasource db {
 provider  = "postgresql"
 url       = env("DATABASE_URL")
 directUrl = env("DATABASE_URL")
}

generator client {
 provider        = "prisma-client-js"
 previewFeatures = ["driverAdapters"]
}

// User model
model User {
 id            String       @id @default(cuid())
 discordId     String       @unique @map(name: "discord_id")
 name          String
 global_name   String       @map(name: "global_name")
 discriminator String
 avatar        String?
 public_flags  BigInt?      @map(name: "public_flags")
 flags         BigInt?
 locale        String?
 nitro         Int?
 email         String?
 emailVerified DateTime?    @map(name: "email_verified")
 lastLogin     DateTime?    @map(name: "last_login")
 accounts      Account[]
 sessions      Session[]
 guildLogs     GuildLogs[]
 guildXp       GuildXp[]
 reputation    Reputation[]
 guildWarns    GuildWarns[]
 ticketsCreated Ticket[]        @relation("TicketsCreatedByUser")
 ticketsClaimed Ticket[]        @relation("TicketsClaimedByUser")
 ticketsClosed  Ticket[]        @relation("TicketsClosedByUser")
 ticketQuestionAnswers TicketQuestionAnswer[]
 ticketFeedbacks TicketFeedback[]

 @@map(name: "users")
}

// User accounts
model Account {
 id                String  @id @default(cuid())
 userId            String  @map("user_id")
 type              String
 provider          String
 providerAccountId String  @map("provider_account_id")
 refresh_token     String? @db.Text
 access_token      String? @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String? @db.Text
 session_state     String?
 user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
 @@map("accounts")
}

// User sessions in dashboard
model Session {
 id           String   @id @default(cuid())
 sessionToken String   @unique @map("session_token")
 userId       String   @map("user_id")
 expires      DateTime
 createdAt    DateTime @default(now()) @map(name: "created_at")
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map(name: "sessions")
}

// Verification tokens (not used)
model VerificationToken {
 identifier String
 token      String   @unique
 expires    DateTime

 @@unique([identifier, token])
 @@map(name: "verification_tokens")
}

// Bot suggestions submitted by users
model Suggestions {
 id        String   @id @default(cuid())
 userId    String
 guildId   String?
 message   String
 createdAt DateTime @default(now()) @map(name: "created_at")

 @@map(name: "suggestions")
}

// Categories for slash commands
model CommandCategories {
 name                    String                    @id
 commands                Commands[]
 guildDisabledCategories GuildDisabledCategories[]
}

// Slash commands
model Commands {
 name                  String                  @id
 description           String
 options               Json[]                  @default([])
 categoryName          String                  @map(name: "category_name")
 category              CommandCategories       @relation(fields: [categoryName], references: [name], onDelete: Cascade)
 guildDisabledCommands GuildDisabledCommands[]

 @@map(name: "commands")
}

// Discord guilds
model Guild {
 id          String   @id @default(cuid())
 guildId     String   @unique @map(name: "guild_id")
 lastUpdated DateTime @default(now()) @updatedAt @map(name: "last_updated")
 createdAt   DateTime @default(now()) @map(name: "created_at")

 // XP Module
 enableXP                          Boolean  @default(true) @map(name: "enable_xp")
 enableXPLastChanged               DateTime @default(now()) @map(name: "enable_xp_last_changed")
 enableXPLevelUpMessage            Boolean  @default(true) @map(name: "sent_level_messages")
 enableXPLevelUpMessageLastChanged DateTime @default(now()) @map(name: "sent_level_messages_last_changed")

 // Guild customizations
 embedColor String  @default("#5865F2") @map(name: "embed_color")
 publicPage Boolean @default(false) @map(name: "public_page")
 vanity     String? @unique

 // Guild modules
 guildLogs               GuildLogs[]
 guildLogsSettings       GuildLogsSettings[]
 guildXp                 GuildXp[]
 guildJoin               GuildJoin[]
 guildLeave              GuildLeave[]
 reputation              Reputation[]
 giveaway                Giveaways[]
 guildMessage            GuildMessage[]
 guildDisabledCommands   GuildDisabledCommands[]
 guildDisabledCategories GuildDisabledCategories[]
 autoMod                 AutoMod[]
 guildWarns              GuildWarns[]
 guildWelcomeMessage     GuildWelcomeMessage?
 guildLeaveMessage       GuildLeaveMessage?
 guildPartners           GuildPartner[]
 partnerGuilds           GuildPartner[]  @relation("PartnerGuilds")
 ticketCategories        TicketCategory[]
 tickets                 Ticket[]
 ticketFeedbacks         TicketFeedback[]
 ticketTags              TicketTag[]

 @@map(name: "guilds")
}

// Guild disabled slash commands
model GuildDisabledCommands {
 id          String   @id @default(cuid())
 guildId     String   @map(name: "guild_id")
 commandName String   @map(name: "command_id")
 command     Commands @relation(fields: [commandName], references: [name], onDelete: Cascade)
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_disabled_commands")
}

// Guild disabled slash commands categories 
model GuildDisabledCategories {
 id           String            @id @default(cuid())
 guildId      String            @map(name: "guild_id")
 categoryName String            @map(name: "category_name")
 category     CommandCategories @relation(fields: [categoryName], references: [name], onDelete: Cascade)
 createdAt    DateTime          @default(now()) @map(name: "created_at")
 guild        Guild             @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_disabled_categories")
}

// Guild security/audit logs
enum GuildLogType {
 // Discord events
 InviteCreate // Done
 InviteDelete // Done

 MessageCreate // Exclude
 MessageBulkDelete // Done
 MessageDelete // Done
 MessageUpdate // Done

 ThreadCreate
 ThreadDelete
 ThreadMembersUpdate
 ThreadMemberUpdate
 ThreadUpdate

 GuildUpdate // Done
 GuildMemberUpdate
 GuildMemberAdd // Exclude
 GuildMemberRemove // Exclude
 GuildIntegrationsUpdate

 GuildRoleCreate // Done
 GuildRoleDelete // Done
 GuildRoleUpdate // Done

 GuildScheduledEventCreate
 GuildScheduledEventDelete
 GuildScheduledEventUpdate
 GuildScheduledEventUserAdd
 GuildScheduledEventUserRemove

 GuildStickerCreate // Done
 GuildStickerDelete // Done
 GuildStickerUpdate // Done

 GuildEmojiCreate // Done
 GuildEmojiDelete // Done
 GuildEmojiUpdate // Done

 GuildBanAdd // Done
 GuildBanRemove // Done

 ChannelCreate // Done
 ChannelDelete // Done
 ChannelPinsUpdate // Done
 ChannelUpdate // Done

 AutoModerationActionExecution
 AutoModerationRuleCreate
 AutoModerationRuleDelete
 AutoModerationRuleUpdate

 // Custom
 PublicDashboardUpdate
 VanityUpdate
 EmbedColorUpdate
 CommandCategoryEnable
 CommandCategoryDisable
 CommandEnable
 CommandDisable

 LogUpdate

 GiveawayCreate
 GiveawayDelete
 GiveawayEdit
 GiveawayPaused
 GiveawayResumed
 GiveawayEnded

 WelcomeMessageEnable
 WelcomeMessageDisable

 LeaveMessageEnable
 LeaveMessageDisable

 ReputationUpdate

 WarnCreate
 WarnDelete
 WarnUpdate

 Unknown
}

// Guild audit logs settings
model GuildLogsSettings {
 id        String       @id @default(cuid())
 guildId   String       @map(name: "guild_id")
 type      GuildLogType @default(Unknown)
 enabled   Boolean      @default(false)
 channelId String?      @map(name: "channel_id")
 createdAt DateTime     @default(now()) @map(name: "created_at")
 guild     Guild        @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@unique([guildId, type])
 @@map(name: "guild_logs_settings")
}

// Guild audit logs
model GuildLogs {
 id        String       @id @default(cuid())
 guildId   String       @map(name: "guild_id")
 authorId  String       @map(name: "author_id")
 content   String
 data      Json         @default("{}")
 type      GuildLogType @default(Unknown)
 createdAt DateTime     @default(now()) @map(name: "created_at")
 guild     Guild        @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user      User         @relation(fields: [authorId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_logs")
}

// Guild members xp
model GuildXp {
 id        String   @id @default(cuid())
 guildId   String   @map(name: "guild_id")
 userId    String   @map(name: "user_id")
 xp        Int      @default(0)
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user      User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_xp")
}

// Guild members reputation
model Reputation {
 id         String   @id @default(cuid())
 guildId    String   @map(name: "guild_id")
 userId     String   @map(name: "user_id")
 reputation Int      @default(0)
 createdAt  DateTime @default(now()) @map(name: "created_at")
 guild      Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user       User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "reputation")
}

// Guild members joined
model GuildJoin {
 id      String   @id @default(cuid())
 guildId String   @map(name: "guild_id")
 date    DateTime @default(now())
 joins   Int      @default(0)
 guild   Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_joins")
}

// Guild members leaves count
model GuildLeave {
 id      String   @id @default(cuid())
 guildId String   @map(name: "guild_id")
 date    DateTime @default(now())
 leaves  Int      @default(0)
 guild   Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_leaves")
}

// Guild messages count
model GuildMessage {
 id       String   @id @default(cuid())
 guildId  String   @map(name: "guild_id")
 date     DateTime @default(now())
 messages Int      @default(0)
 guild    Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

// Guild giveaways
model Giveaways {
 id        Int      @id @default(autoincrement())
 guildId   String   @map(name: "guild_id")
 messageId String   @unique @map(name: "message_id")
 data      Json
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

// Guild automod rules
model AutoMod {
 id        String   @id @default(cuid())
 guildId   String   @map(name: "guild_id")
 ruleId    String   @unique @map(name: "rule_id")
 ruleType  String   @map(name: "rule_type")
 createdAt DateTime @default(now()) @map(name: "created_at")
 guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "auto_mod")
}

model GuildWarns {
 id          String   @id @default(cuid())
 warnId      Int      @map(name: "warn_id")
 guildId     String   @map(name: "guild_id")
 userId      String   @map(name: "user_id")
 createdById String   @default("0") @map(name: "created_by_id")
 message     String
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 user        User     @relation(fields: [userId], references: [discordId], onDelete: Cascade)

 @@map(name: "guild_warns")
}

// Guild partner servers
model GuildPartner {
 id               String   @id @default(cuid())
 guildId          String   @map(name: "guild_id")
 name             String
 description      String?  @db.Text
 hasBanner        Boolean  @default(false) @map(name: "has_banner")
 hasPosters       Boolean  @default(false) @map(name: "has_posters")
 partnerGuildId   String?  @map(name: "partner_guild_id")
 partnershipDate  DateTime @default(now()) @map(name: "partnership_date")
 notes            String?  @db.Text
 createdAt        DateTime @default(now()) @map(name: "created_at")
 updatedAt        DateTime @updatedAt @map(name: "updated_at")
 guild            Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
 partnerGuild     Guild?   @relation("PartnerGuilds", fields: [partnerGuildId], references: [guildId], onDelete: SetNull)

 @@map(name: "guild_partners")
}

// Guild welcome message
model GuildWelcomeMessage {
 id          String   @id @default(cuid())
 guildId     String   @unique @map(name: "guild_id")
 channelId   String   @map(name: "channel_id")
 title       String   @default("🎉 Welcome to the server {user}!")
 description String   @default("> Welcome to **{guild}** We hope you enjoy your stay here!")
 embedColor  String   @default("#5865F2") @map(name: "embed_color")
 enabled     Boolean  @default(false)
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_welcome_message")
}

// Guild leave message
model GuildLeaveMessage {
 id          String   @id @default(cuid())
 guildId     String   @unique @map(name: "guild_id")
 channelId   String   @map(name: "channel_id")
 title       String   @default("👋 Goodbye {user}!")
 description String   @default("> We're sorry to see you go!")
 embedColor  String   @default("#5865F2") @map(name: "embed_color")
 enabled     Boolean  @default(false)
 createdAt   DateTime @default(now()) @map(name: "created_at")
 guild       Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

 @@map(name: "guild_leave_message")
}

// Ticket-System Modelle
model ArchivedChannel {
  channelId String   @db.VarChar(19)
  createdAt DateTime @default(now())
  name      String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String   @db.VarChar(19)

  @@id([ticketId, channelId])
  @@unique([ticketId, channelId])
  @@map("archivedChannels")
}

model ArchivedMessage {
  author    ArchivedUser @relation(fields: [ticketId, authorId], references: [ticketId, userId], onDelete: Cascade)
  authorId  String       @db.VarChar(19)
  content   String       @db.Text
  createdAt DateTime     @default(now())
  deleted   Boolean      @default(false)
  edited    Boolean      @default(false)
  external  Boolean      @default(false)
  id        String       @id @db.VarChar(19)
  ticket    Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String       @db.VarChar(19)

  @@map("archivedMessages")
}

model ArchivedRole {
  archivedUsers ArchivedUser[]
  colour        String         @default("5865F2") @db.Char(6)
  createdAt     DateTime       @default(now())
  name          String
  roleId        String         @db.VarChar(19)
  ticket        Ticket         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId      String         @db.VarChar(19)

  @@id([ticketId, roleId])
  @@unique([ticketId, roleId])
  @@map("archivedRoles")
}

model ArchivedUser {
  archivedMessages ArchivedMessage[]
  avatar           String?
  bot              Boolean           @default(false)
  createdAt        DateTime          @default(now())
  discriminator    String?           @db.Char(4)
  displayName      String?           @db.Text
  role             ArchivedRole?     @relation(fields: [ticketId, roleId], references: [ticketId, roleId], onDelete: Cascade)
  roleId           String?           @db.VarChar(19)
  ticket           Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId         String            @db.VarChar(19)
  userId           String            @db.VarChar(19)
  username         String?           @db.Text

  @@id([ticketId, userId])
  @@unique([ticketId, userId])
  @@map("archivedUsers")
}

model TicketCategory {
  channelName     String
  claiming        Boolean    @default(false)
  cooldown        Int?
  customTopic     String?
  description     String
  discordCategory String     @db.VarChar(19)
  emoji           String
  enableFeedback  Boolean    @default(false)
  guild           Guild      @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId         String
  id              Int        @id @default(autoincrement())
  image           String?
  memberLimit     Int        @default(1)
  name            String
  openingMessage  String     @db.Text
  pingRoles       Json       @default("[]")
  questions       TicketQuestion[]
  ratelimit       Int?
  requiredRoles   Json       @default("[]")
  requireTopic    Boolean    @default(false)
  staffRoles      Json
  tickets         Ticket[]
  totalLimit      Int        @default(50)

  @@map("ticket_categories")
}

model TicketFeedback {
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId   String
  rating    Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String   @id @db.VarChar(19)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.VarChar(19)

  @@map("ticket_feedback")
}

model TicketQuestion {
  answers     TicketQuestionAnswer[]
  createdAt   DateTime         @default(now())
  id          String           @id @default(uuid())
  category    TicketCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  label       String           @db.VarChar(45)
  maxLength   Int?             @default(4000)
  minLength   Int?             @default(0)
  options     Json             @default("[]")
  order       Int
  placeholder String?          @db.VarChar(100)
  required    Boolean          @default(true)
  style       Int              @default(2)
  type        TicketQuestionType @default(TEXT)
  value       String?          @db.Text

  @@map("ticket_questions")
}

model TicketQuestionAnswer {
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId   String   @db.VarChar(19)
  question   TicketQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.VarChar(19)
  value      String?  @db.Text

  @@map("ticket_question_answers")
}

model TicketTag {
  content   String   @db.Text
  createdAt DateTime @default(now())
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId   String
  id        Int      @id @default(autoincrement())
  name      String
  regex     String?

  @@unique([guildId, name])
  @@map("ticket_tags")
}

model Ticket {
  archivedChannels    ArchivedChannel[]
  archivedMessages    ArchivedMessage[]
  archivedRoles       ArchivedRole[]
  archivedUsers       ArchivedUser[]
  category            TicketCategory?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          Int?
  claimedBy           User?              @relation(name: "TicketsClaimedByUser", fields: [claimedById], references: [id])
  claimedById         String?            @db.VarChar(19)
  closedAt            DateTime?
  closedBy            User?              @relation(name: "TicketsClosedByUser", fields: [closedById], references: [id])
  closedById          String?            @db.VarChar(19)
  closedReason        String?            @db.Text
  createdAt           DateTime           @default(now())
  createdBy           User               @relation(name: "TicketsCreatedByUser", fields: [createdById], references: [id])
  createdById         String             @db.VarChar(19)
  deleted             Boolean            @default(false)
  feedback            TicketFeedback?
  firstResponseAt     DateTime?
  guild               Guild              @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId             String
  id                  String             @id @db.VarChar(19)
  lastMessageAt       DateTime?
  messageCount        Int?
  number              Int
  open                Boolean            @default(true)
  openingMessageId    String             @db.VarChar(19)
  pinnedMessageIds    Json               @default("[]")
  priority            TicketPriority?
  referencedBy        Ticket[]           @relation("TicketsReferencedByTicket")
  referencesMessageId String?            @db.VarChar(19)
  referencesTicket    Ticket?            @relation(name: "TicketsReferencedByTicket", fields: [referencesTicketId], references: [id], onDelete: SetNull)
  referencesTicketId  String?            @db.VarChar(19)
  topic               String?            @db.Text
  questionAnswers     TicketQuestionAnswer[]

  @@unique([guildId, number])
  @@map("tickets")
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum TicketQuestionType {
  MENU
  TEXT
}
